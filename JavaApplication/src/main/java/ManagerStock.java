
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author xahna
 */
public class ManagerStock extends javax.swing.JFrame {
    //Holds copy of the database during the current session
    private DefaultTableModel defTabMod;
    //holds the row number selected by the user
    private int selectedRow;
    static int advisorID; 
    static String advisorname; 
    static boolean isInstantiated;//When is false clicking on CustomerRecords table doesn't assign value to custID
   String oldadv; //used in reassign button to get the id of old advisor 
       String highestblankamount;
   PreparedStatement pst= null; 
    ResultSet rs=null; 
    Connection con=null; 
          
Boolean clicked=false;
      
    
    /**
     * Creates new form managerStock
     */
    public ManagerStock() {
        initComponents();
         quantityTextbox.setVisible(false);
         
       
         selectAdvisorButton.setVisible(false);
      
       nameTextbox.setVisible(false);
       nameWithMaxAMountTextbox.setVisible(false);
     
         isInstantiated=true; 
    
       
   
    }
     //populates the customerTable table with the relevant data from tha databse
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerRecordsBackground = new javax.swing.JPanel();
        customerRecordsBlueBackground = new javax.swing.JPanel();
        customerRecordsTitle = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        assignButton = new javax.swing.JButton();
        selectBlankTypeComboBox = new javax.swing.JComboBox<>();
        quantityTextbox = new javax.swing.JTextField();
        selectAdvisorButton = new javax.swing.JButton();
        nameTextbox = new javax.swing.JTextField();
        reAssignButton = new javax.swing.JButton();
        nameWithMaxAMountTextbox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        customerRecordsBackground.setBackground(new java.awt.Color(255, 255, 255));
        customerRecordsBackground.setPreferredSize(new java.awt.Dimension(1200, 1539));
        customerRecordsBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                customerRecordsBackgroundMouseMoved(evt);
            }
        });

        customerRecordsBlueBackground.setBackground(new java.awt.Color(102, 255, 255));

        customerRecordsTitle.setFont(new java.awt.Font("Tahoma", 0, 72)); // NOI18N
        customerRecordsTitle.setText("MANAGER STOCK");

        backButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerRecordsBlueBackgroundLayout = new javax.swing.GroupLayout(customerRecordsBlueBackground);
        customerRecordsBlueBackground.setLayout(customerRecordsBlueBackgroundLayout);
        customerRecordsBlueBackgroundLayout.setHorizontalGroup(
            customerRecordsBlueBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerRecordsBlueBackgroundLayout.createSequentialGroup()
                .addContainerGap(313, Short.MAX_VALUE)
                .addComponent(customerRecordsTitle)
                .addGap(158, 158, 158)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        customerRecordsBlueBackgroundLayout.setVerticalGroup(
            customerRecordsBlueBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerRecordsBlueBackgroundLayout.createSequentialGroup()
                .addGroup(customerRecordsBlueBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerRecordsBlueBackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton))
                    .addGroup(customerRecordsBlueBackgroundLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(customerRecordsTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        returnButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        returnButton.setText("RETURN");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        assignButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        selectBlankTypeComboBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        selectBlankTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT BLANK TYPE", "444", "440", "420", "201", "101", "451", "452" }));
        selectBlankTypeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectBlankTypeComboBoxMouseClicked(evt);
            }
        });
        selectBlankTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBlankTypeComboBoxActionPerformed(evt);
            }
        });

        quantityTextbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        quantityTextbox.setText("Enter Quantity...");
        quantityTextbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quantityTextboxMouseClicked(evt);
            }
        });
        quantityTextbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTextboxActionPerformed(evt);
            }
        });

        selectAdvisorButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        selectAdvisorButton.setText("SELECT ADVISOR");
        selectAdvisorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectAdvisorButtonMouseClicked(evt);
            }
        });
        selectAdvisorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAdvisorButtonActionPerformed(evt);
            }
        });

        nameTextbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        nameTextbox.setText("Advisor's Name...");
        nameTextbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextboxActionPerformed(evt);
            }
        });

        reAssignButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        reAssignButton.setText("Re-Assign");
        reAssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reAssignButtonActionPerformed(evt);
            }
        });

        nameWithMaxAMountTextbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        nameWithMaxAMountTextbox.setText("Advisor with those blanks...");
        nameWithMaxAMountTextbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameWithMaxAMountTextboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerRecordsBackgroundLayout = new javax.swing.GroupLayout(customerRecordsBackground);
        customerRecordsBackground.setLayout(customerRecordsBackgroundLayout);
        customerRecordsBackgroundLayout.setHorizontalGroup(
            customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(customerRecordsBlueBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerRecordsBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerRecordsBackgroundLayout.createSequentialGroup()
                        .addComponent(assignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reAssignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(178, 178, 178)
                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(customerRecordsBackgroundLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customerRecordsBackgroundLayout.createSequentialGroup()
                                .addComponent(quantityTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerRecordsBackgroundLayout.createSequentialGroup()
                                .addGroup(customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(customerRecordsBackgroundLayout.createSequentialGroup()
                                        .addComponent(selectBlankTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(customerRecordsBackgroundLayout.createSequentialGroup()
                                        .addComponent(selectAdvisorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(265, 265, 265)))
                                .addGroup(customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameWithMaxAMountTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(93, 93, 93))))))
        );
        customerRecordsBackgroundLayout.setVerticalGroup(
            customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerRecordsBackgroundLayout.createSequentialGroup()
                .addComponent(customerRecordsBlueBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectBlankTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameWithMaxAMountTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(quantityTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addGroup(customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAdvisorButton)
                    .addComponent(nameTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(285, 285, 285)
                .addGroup(customerRecordsBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignButton)
                    .addComponent(returnButton)
                    .addComponent(reAssignButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(customerRecordsBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(customerRecordsBackground, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        isInstantiated=false;
            dispose(); 
    }//GEN-LAST:event_backButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // TODO add your handling code here:
           String s=selectBlankTypeComboBox.getSelectedItem().toString();  //choosen blanks
      
       String quantity= quantityTextbox.getText(); //input of quantity of blanks
        int blanks=  Integer.parseInt(quantity);
        
        
        
        
        
     try (   Connection con = DbCon.getConnection();) {
                     PreparedStatement rst = null;
                     rst=con.prepareStatement(" DELETE FROM Blank WHERE blankNumber IN(select blankNUmber from(select blankNumber FROM Blank where blankNumber like '"+s+"%' AND isSold = 0 LIMIT "+blanks+")x)");
                     rst.execute();
     
          
     
          
         
         JOptionPane.showMessageDialog(null,"Deleted successfully");
           
         dispose();
   
       }catch (SQLException | ClassNotFoundException e) {
          JOptionPane.showMessageDialog(null,"error");
        }
        
        
        //get blanks where isSOld is false and staffID is null and blankID==combobox
        //delete that row and do it untill the quantity. 
        
        
    }//GEN-LAST:event_returnButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
   String quantity= quantityTextbox.getText(); //input of quantity of blanks
        int blanks=  Integer.parseInt(quantity);
        
        if ( advisorID==0) {
                JOptionPane.showMessageDialog(null,
                        "To assign please first \"SELECT ADVISOR\"",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
  
        
  else{   String s=selectBlankTypeComboBox.getSelectedItem().toString();  //choosen blanks
        int chosen=  Integer.parseInt(s);
     
       String dbblank=null;
   int initialblanks=blanks; 
        try (   Connection con = DbCon.getConnection();) {
        String sql ="select * from Blank where StaffID IS null ";
        pst=con.prepareStatement(sql);
        rs=pst.executeQuery();
        
    
       
           while(rs.next() ){
             
                dbblank=rs.getString("blankNumber");
        
      
               char a= dbblank.charAt(0); char b= dbblank.charAt(1); char c= dbblank.charAt(2);  //pick fist 3 digits of blank num 
               String digits = new StringBuilder().append(a).append(b).append(c).toString(); //merger chars into a stign 
               int stock=  Integer.parseInt(digits);//conver top strin ginto int for comparisio in the If statment 
    
               if(chosen==stock&&blanks!=0){
                     PreparedStatement rst = null;
                     rst=con.prepareStatement("UPDATE Blank SET StaffID = '"+advisorID+"' where blankNumber= '"+dbblank+"'  ");
                     rst.execute();
      
                    blanks--;
               }
          
       
          
         }
           
           
       if(blanks==initialblanks){JOptionPane.showMessageDialog(null,"All of the blanks are currently assigned, please re-assign");}    
       
      else if(blanks!=0){ JOptionPane.showMessageDialog(null,"Not enough blanks therefore could only assign" + " "+ (initialblanks-blanks) +" "+ "blanks");}
      else if(blanks==0){JOptionPane.showMessageDialog(null," "+initialblanks+"   blanks assigned ");     dispose();}      
         
   
           
     
            
     
        }catch (SQLException | ClassNotFoundException e) {
          JOptionPane.showMessageDialog(null,e);
        }
       
   
    
          
          
          
            
  }
            
        
    }//GEN-LAST:event_assignButtonActionPerformed

    private void selectBlankTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBlankTypeComboBoxActionPerformed
        // TODO add your handling code here:
          int s= selectBlankTypeComboBox.getSelectedIndex();
      
           if(s!=11){ 
         
           quantityTextbox.setVisible(true);
          nameWithMaxAMountTextbox.setVisible(true);  
  selectAdvisorButton.setVisible(true);
           nameTextbox.setVisible(true);
          
          }
    
          
            
         String blankType=selectBlankTypeComboBox.getSelectedItem().toString();
          char a= blankType.charAt(0); char b= blankType.charAt(1); char c= blankType.charAt(2);  //pick fist 3 digits of blank num 
               String digits = new StringBuilder().append(a).append(b).append(c).toString(); //merger chars into a stign 
               int blank=  Integer.parseInt(digits);//conver top string into int for sql stms
                 ArrayList advisorID=new ArrayList(); 
                  ArrayList blankamount=new ArrayList(); 
         try (   Connection con = DbCon.getConnection();) {
      
       String sql=" select StaffID, COUNT(*) FROM Blank WHERE blankNumber like '"+blank+"%' and isSold =0 and StaffID not null  GROUP BY StaffID ORDER by COUNT(*) DESC ; ";
       pst=con.prepareStatement(sql);
       rs=pst.executeQuery();
       while(rs.next()){ 
         advisorID.add(rs.getInt(1)); //adding list of adv in one array 
         blankamount.add(rs.getInt(2));
          
       
       } //adding quantlty of tickets in naother array
       
         oldadv=advisorID.get(0).toString();
        
       highestblankamount= blankamount.get(0).toString();
          
          String sql2="SELECT name FROM Staff where ID ='"+oldadv +"'";  //all of this is showin g teh first bales of arry (adv who has the most quatity) into the GUI page 
            PreparedStatement pst2= null; 
             ResultSet rs2=null; 
             pst2=con.prepareStatement(sql2);
             rs2=pst2.executeQuery();
          nameWithMaxAMountTextbox.setText("advisor: "+rs2.getString("name")+" "+"has"+" "+blankamount.get(0).toString()+" "+"blanks");
         // currentAmountTextbox.setText(blankamount.get(0).toString()+" "+"blanks"); 
            
          
     //String s=rs.getString(rs.getRow()); System.out.println(s)
        }catch (SQLException | ClassNotFoundException e) {
          JOptionPane.showMessageDialog(null,e);
        } 
              
    }//GEN-LAST:event_selectBlankTypeComboBoxActionPerformed

    private void quantityTextboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTextboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTextboxActionPerformed

    private void selectAdvisorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAdvisorButtonActionPerformed
        // TODO add your handling code here:
    
            
          AdvisorsList advlist= new AdvisorsList();
        advlist.setVisible(true);
    }//GEN-LAST:event_selectAdvisorButtonActionPerformed

    private void nameTextboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextboxActionPerformed

    private void customerRecordsBackgroundMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerRecordsBackgroundMouseMoved
      if(AdvisorsList.select==true){
       
       nameTextbox.setText(advisorname);
    
      
      }
    }//GEN-LAST:event_customerRecordsBackgroundMouseMoved

    private void reAssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reAssignButtonActionPerformed
        // TODO add your handling code here:
         if ( advisorID==0) {
                JOptionPane.showMessageDialog(null,
                        "To reassign please first \"SELECT ADVISOR\"",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            }
         else{
       String s=selectBlankTypeComboBox.getSelectedItem().toString();  //choosen blanks
       int chosen=  Integer.parseInt(s);
       String quantity= quantityTextbox.getText(); //input of quantity of blanks
        int blanks=  Integer.parseInt(quantity);  
       
        
        try (   Connection con = DbCon.getConnection();) {
        String sql ="select * from Blank where  StaffID ='"+oldadv+"'  and  blankNumber like '"+s+"%' and isSold = 0;  ";      //getting all the unsold blanks where where adv ID is same as the id of adv whoe has the most amount of thay tupe of blanks 
        pst=con.prepareStatement(sql);
        rs=pst.executeQuery();
        
           
        while(rs.next() ){   //reassigning the number of blanks specified by the user
           if(blanks!=0){
                PreparedStatement rst2 = null;
                 rst2=con.prepareStatement("UPDATE Blank SET StaffID = '"+advisorID+"' where  StaffID ='"+oldadv+"'  and  blankNumber like '"+s+"%' and isSold = 0;  ");
                  rst2.execute();
                  blanks--;
            
           }
       }
           int x = Integer.parseInt(    highestblankamount); //use rs. get here
           if(blanks>x){JOptionPane.showMessageDialog(null,"Quantity entered must be lower than available quantity");}
          
           
           dispose();   
           
           
           
            
           
         
   
           
     
            
     
        }catch (SQLException | ClassNotFoundException e) {
          JOptionPane.showMessageDialog(null,e);
        }
        
        // take "quantity" number of blanks from "oldadv" and put them in "advisorID"
        // UPDATE from blanks SET staffid to "advisorID" where blank number is "chosen" and staffID is "oldadv"   DO THIS ALL FOR "CHOSEN TIMES"
        
         }
        
    }//GEN-LAST:event_reAssignButtonActionPerformed

    private void quantityTextboxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quantityTextboxMouseClicked
        // TODO add your handling code here:
         quantityTextbox.setText("");//clears the textField once you click on it
    }//GEN-LAST:event_quantityTextboxMouseClicked

    private void nameWithMaxAMountTextboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameWithMaxAMountTextboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameWithMaxAMountTextboxActionPerformed

    private void selectBlankTypeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectBlankTypeComboBoxMouseClicked
        // TODO add your handling code here:
      
        
    }//GEN-LAST:event_selectBlankTypeComboBoxMouseClicked

    private void selectAdvisorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectAdvisorButtonMouseClicked
        // TODO add your handling code here:
        clicked=true;
       
    }//GEN-LAST:event_selectAdvisorButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerStock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignButton;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel customerRecordsBackground;
    private javax.swing.JPanel customerRecordsBlueBackground;
    private javax.swing.JLabel customerRecordsTitle;
    private javax.swing.JTextField nameTextbox;
    private javax.swing.JTextField nameWithMaxAMountTextbox;
    private javax.swing.JTextField quantityTextbox;
    private javax.swing.JButton reAssignButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton selectAdvisorButton;
    private javax.swing.JComboBox<String> selectBlankTypeComboBox;
    // End of variables declaration//GEN-END:variables
}
